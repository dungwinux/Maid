import os
import argparse
import configparser
import shutil

appPath = os.getenv('APPDATA')
confHeader = """# File generated by Maid - DO NOT EDIT
"""

# Global variable


def FirstTimeSetup():

    print("Running First-Time-Setup")

    cwd = os.getcwd()

    global maidDir, maidConfDir, maidTempDir
    maidDir = os.fsencode(os.getcwd() + '\\maid\\')
    maidConfDir = os.fsencode(appPath + '\\maid\\')
    maidTempDir = os.fsencode(os.getenv('TEMP') + '\\maid\\')

    # Maid maidDir
    if not os.path.isdir(maidConfDir):
        os.mkdir(maidConfDir)
    os.chdir(maidConfDir)
    print(f"Config directory: {os.getcwd()}")

    # Config file
    config = configparser.ConfigParser()
    config['options'] = {
        'rootDir': os.fsdecode(maidDir),
        'confDir': os.fsdecode(maidConfDir),
        'tempDir': os.fsdecode(maidTempDir),
        'logFile': ''}
    with open(os.fsencode('maid.conf'), 'w') as configfile:
        configfile.write(confHeader)
        config.write(configfile)

    # TaskList file
    taskList = configparser.ConfigParser()
    taskList['list'] = {
        'GitPkg': 'False'}
    with open(os.fsencode('list.conf'), 'w') as taskfile:
        taskfile.write(confHeader)
        taskList.write(taskfile)

    # Pkg maidDir
    os.chdir(maidDir)
    if not os.path.isdir(maidDir):
        os.mkdir(maidDir)

    if not os.path.isdir('list/'):
        os.mkdir('list/')
    if not os.path.isdir('pkg/'):
        os.mkdir('pkg/')

    os.chdir(cwd)


parser = argparse.ArgumentParser(
    prog='Maid', description='Maid - Package Manager')
parser.add_argument('--version', action='version',
                    version='%(prog)s Pre-Alpha')


def ReadConf():
    maidConfFile = os.fsencode(appPath + '\\maid\\maid.conf')
    exists = os.path.isfile(maidConfFile)
    if not exists:
        return False
    config = configparser.ConfigParser()
    config.read(maidConfFile)

    global maidDir, maidConfDir, maidTempDir
    maidDir = os.fsencode(config['options']['rootDir'])
    maidConfDir = os.fsencode(config['options']['confDir'])
    maidTempDir = os.fsencode(config['options']['tempDir'])

    return True


args = parser.parse_args()

if not ReadConf():
    FirstTimeSetup()

print(maidDir)
print(maidConfDir)
print(maidTempDir)
